#!/bin/bash

#	‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà 
#	‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà  
#	‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà   
#	‚ñà‚ñà      ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà  
#	‚ñà‚ñà      ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà 
#
#	‚ú® ‚õèÔ∏è PICK ‚Äî Version 0.0.1
#	Author: Nadan Gergeo <nadan@kth.se>
#	ETH: 0xC0b1239c2D236DCeC286B75b74e82402C512eb42

# GET NAME OF THIS SCRIPT
SCRIPTNAME="$(basename $0)"
# GET PATH OF THIS SCRIPT
SCRIPTPATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
# CD TO SCRIPT PATH
cd $SCRIPTPATH

##############################################   PREPARATION   ####################################################

# GET CONFIGURATIONS
CONFIG=`cat config.json`
MINERS_CONFIG=`cat miners.json`
MINERS=`echo $MINERS_CONFIG | jq -r keys_unsorted[]` # Maintain order (for priority).

# NAME OF MINER/PROCESS TO RUN
MINER="" # decided later

# DEFAULT OPTIONS
CUDA_DEVICES=""
OPENCL_DEVICES=""
OPT_C=`echo $CONFIG | jq -r ".defaultCoin"` # Get default from config
OPT_W=""
OPT_P=""
OPT_K="false"

# MINER OPTIONS
API_BIND_HTTP="0.0.0.0:1337" # t-rex only

# COLORING & TEXT STYLING
black=`tput setaf 0`
red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
blue=`tput setaf 4`
magenta=`tput setaf 5`
cyan=`tput setaf 6`
white=`tput setaf 7`
bold=`tput bold`
reset=`tput sgr0`

helpFunction()
{
	echo -e "${bold}START MANUAL${reset} üöÄ"
	echo -e "Usage: $SCRIPTNAME [-c] coin -w wallet -p pool -m miner [-k]"
	echo
	echo -e "The -c flag is optional if the coin is the first param. I.e. you can call PICK like this:"
	echo -e "\tPICK eth"
	echo -e "Or like this:"
	echo -e "\tPICK rvn -w n4d -p flypool -m nbminer"
	echo
	echo "Options:"
	echo -e "\t-h, --help\t Display this help and exit."
	echo -e "\t-c, --coin\t Coin to mine (ETH/ETC...). Default is configured in config.json (defaultCoin)."
	echo -e "\t-w, --wallet\t Wallet (ID) to mine to. Key name, as configured in config.json. If not set, it will automatically choose the first one defined for the symbol in config.json."
	echo -e "\t-p, --pool\t Pool (ID) to use. Key name, as configured in config.json. If not set, it will default to the first one defined for the symbol in config.json)."
	echo -e "\t-m, --miner\t Miner to use. If not set, it will choose one that supports the coin automatically."
	echo -e "\t-k, --keepAlive\t Keep any existing miner alive? Or automatically kill running miner first (default)?"
	echo -e "\t-nd,--nvidia-devices\t Comma- or space-separated list of cuda devices to use (e.g 0,1,2, or 1 2 3). Will use all available gpus per default."
	echo -e "\t-ad,--amd-devices\t Comma- or space-separated list of open cl devices to use (e.g 0,1,2 or 1 2 3). Will use all available gpus per default."
	exit 1 # Exit script after printing help
}

# Get first letter of first param
firstParamFirstLetter=`echo $1 | head -c 1`

# Redirect shortcut call to -c
if [ "$firstParamFirstLetter" != "" ] && [ "$firstParamFirstLetter" != "-" ]; then
	# check if first param happens to be a coin
	supported=$(SUPPORT | grep -c -- $1) 

	# if param is a supported coin, redirect as shortcut call to -c option
	if [ "$supported" != "0" ]; then
		c=$1 # store first param as c
		shift # shift params
		set -- "$@" "-c" $c # add -c [coin] to params, together with rest
	else
		echo "$1 is not a supported coin!"
		exit 420
	fi
fi

# Transform long options to short ones
for arg in "$@"; do
  shift # shift params, $1 becomes $2, $2 becomse $3, etc...
  case "$arg" in
	"--help")			set -- "$@" "-h" ;;
	"--coin")			set -- "$@" "-c" ;;
	"--wallet")			set -- "$@" "-w" ;;
	"--pool")			set -- "$@" "-p" ;;
	"--miner")			set -- "$@" "-m" ;;
	"--keepAlive")		set -- "$@" "-k" ;;
	"--nvidia-devices")	set -- "$@" "-nd" ;;
	"--amd-devices")	set -- "$@" "-ad" ;;
	*)					set -- "$@" "$arg"
  esac
done

while getopts "c:w:p:h:m:k:nd:ad: FLAG:" opt
do
   case "$opt" in
	  "h") 	helpFunction ;; # Print helpFunction
	  "c") 	OPT_C="$OPTARG" ;;
	  "w") 	OPT_W="$OPTARG" ;;
	  "p") 	OPT_P="$OPTARG" ;;
	  "m") 	MINER="$OPTARG" ;;
	  "k") 	OPT_K="true" ;;
	  "nd") CUDA_DEVICES="$OPTARG" ;;
	  "ad") OPENCL_DEVICES="$OPTARG" ;;
	  "?") 	helpFunction >&2; exit 1 ;;
   esac
done

# Transform coin symbol to UPPERCASE and lowercase
COIN=`echo $OPT_C | tr '[:lower:]' '[:upper:]'`
coin=`echo $COIN | tr '[:upper:]' '[:lower:]'` # lowercase

# Convert DEVICES to comma & space separated lists
CUDA_DEVICES_SPACE="${CUDA_DEVICES//,/$' '}"
CUDA_DEVICES_COMMA="${CUDA_DEVICES// /$','}"
OPENCL_DEVICES_SPACE="${OPENCL_DEVICES//,/$' '}"
OPENCL_DEVICES_COMMA="${OPENCL_DEVICES// /$','}"

# Unpack stuff from config
WORKER=`echo $CONFIG | jq -r ".workerName"`
SYMBOL=`echo $CONFIG | jq -r ".${COIN}"`
WALLETS=`echo $SYMBOL | jq -r ".wallets"`
NUM_OF_WALLETS=`echo $WALLETS | jq -r length`
ICON=`echo $SYMBOL | jq -r ".icon"`
COLOR=`echo $SYMBOL | jq -r ".color"`
COLOR="${COLOR:-white}" #default icon color to white
PERS=`echo $SYMBOL | jq -r ".pers"`
COIN_EXTRA_FLAGS=`echo $SYMBOL | jq -r ".extraFlags"`

# If wallet option is passed to command
if [ -n "$OPT_W" ]
then
	# Get wallet using option
	WALLET=`echo $WALLETS | jq -r ".${OPT_W}"`
elif [ "$NUM_OF_WALLETS" -eq 0 ]
then
		echo "Can't start! No wallets defined in CONFIG for ${COIN}." 1>&2
		exit 420
else
	# Get first wallet
	OPT_W=`echo $WALLETS | jq -r keys_unsorted["0"]`
	WALLET=`echo $WALLETS | jq -r ".${OPT_W}"`
fi

POOLS=`echo $SYMBOL | jq -r ".pools"`
NUM_OF_POOLS=`echo $POOLS | jq -r length`

# If pool option is passed to command
if [ -n "$OPT_P" ]
then
	# Get pool using passed option
	POOL=`echo $POOLS | jq -r ".${OPT_P}"`
elif [ "$NUM_OF_POOLS" -eq 0 ]
then
	echo "Can't start! No pools defined in CONFIG for ${COIN}." 1>&2
	exit 420
else
	# Default to first pool in list
	OPT_P=`echo $POOLS | jq -r keys["0"]`
	POOL=`echo $POOLS | jq -r ".${OPT_P}"`
fi

# GET POOL SCHEME, HOST AND PORT
POOL_SCHEME=`echo $POOL | jq -r ".scheme"`
POOL_HOST=`echo $POOL | jq -r ".host"`
POOL_PORT=`echo $POOL | jq -r ".port"`
POOL_PASSWORD=`echo $POOL | jq -r ".password"`
POOL_HOST_PORT=$POOL_HOST:$POOL_PORT

# If MINER is not set via options, *automatically* figure out which miner to use depending on what is installed and what the support is like.
if [ -z "$MINER" ]
then
	FOUND="false"

	for _miner in $MINERS
	do
		# Get miner configuration
		MINER_CONFIG=`echo $MINERS_CONFIG | jq -r ".$_miner"`
		SUPPORTS_COIN=`echo $MINER_CONFIG | jq -r ".algos" | jq -r 'has("'$coin'")'`
		# GET MINER BIN (path)
		# Will be empty if unexisting or lacking execution permission (chmod -x)
		MINER_BIN=`which ./MINERS/$_miner`
		INSTALLED=`echo $MINER_BIN | { read minerLoc; [ -z $minerLoc ] && echo "false" || echo "true"; }`

		if [ "$INSTALLED" = "true" ] && [ "$SUPPORTS_COIN" = "true" ]
		then
			MINER=$_miner
			FOUND="true" # YAY!
			break
		fi
	done

	if [ "$FOUND" = "false" ]
	then
		# Not supported by miner, print error and exit
		echo "Can't start! Configured/installed miners does not support ${COIN}." 1>&2
		exit 420
	fi
else
	# Get miner configuration
	MINER_CONFIG=`echo $MINERS_CONFIG | jq -r ".$MINER"`
	SUPPORTS_COIN=`echo $MINER_CONFIG | jq -r ".algos" | jq -r 'has("'$coin'")'`
	# GET MINER BIN (path)
	# Will be empty if unexisting or lacking execution permission (chmod -x)
	MINER_BIN=`which ./MINERS/$MINER`
	INSTALLED=`echo $MINER_BIN | { read minerLoc; [ -z $minerLoc ] && echo "false" || echo "true"; }`

	if [ "${!INSTALLED}" = "false" ]; then
		echo "Can't start! ${MINER} is uninstalled/disabled ${COIN}." 1>&2
		echo "The miner needs to be in the MINERS directory, with execution permission (chmod +x MINERS/miner)"
		exit 420
	elif [ "${!SUPPORTS_COIN}" = "false" ]; then
		# Not supported by miner, print error and exit
		echo "Can't start! ${MINER} does not support ${COIN}." 1>&2
		exit 420
	fi
fi

# Get miner configs - algo-flag for miner and algo-name for coin + misc
ALGO_FLAG=`echo $MINER_CONFIG | jq -r ".algoFlag"`
ALGO=`echo $MINER_CONFIG | jq -r ".algos" | jq -r ".$coin"`
EXTRA_FLAGS=`echo $MINER_CONFIG | jq -r ".extraFlags"`
MINER_NAME=`echo $MINER_CONFIG | jq -r ".name"`
MINER_ICON=`echo $MINER_CONFIG | jq -r ".icon"`
CUDA_FLAG=`[ $CUDA_DEVICES = "" ] && echo $MINER_CONFIG | jq -r ".cudaFlag"`
OPENCL_FLAG=`[ $OPENCL_DEVICES = "" ] && echo $MINER_CONFIG | jq -r ".openCLFlag"`


# ‚ö†Ô∏è SANITIZE INPUTS! SANITIZE'EM ALL! ANYTHING THAT TOUCHES EXECUTION! ‚ö†Ô∏è

SANITIZE=./helpers/sanitize

MINER=`$SANITIZE $MINER`
MINER_BIN=`$SANITIZE $MINER_BIN` # JUST TO BE ON THE SAFE SIDE!

ALGO_FLAG=`$SANITIZE $ALGO_FLAG`
ALGO=`$SANITIZE $ALGO`
POOL_SCHEME=`$SANITIZE $POOL_SCHEME`
POOL_HOST=`$SANITIZE $POOL_HOST`
POOL_PORT=`$SANITIZE $POOL_PORT`
POOL_PASSWORD=`$SANITIZE $POOL_PASSWORD`
POOL_HOST_PORT=`$SANITIZE $POOL_HOST_PORT`
WALLET=`$SANITIZE $WALLET`
WORKER=`$SANITIZE $WORKER`
EXTRA_FLAGS=`$SANITIZE $EXTRA_FLAGS`
CUDA_FLAG=`$SANITIZE $CUDA_FLAG`
OPENCL_FLAG=`$SANITIZE $OPENCL_FLAG`

if [ "$MINER_ICON" = null ] || [ "$MINER_ICON" = "" ]; then
	MINER_ICON="‚õèÔ∏è"  #default icon to a pick ‚õèÔ∏è
else
	MINER_NAME=`$SANITIZE $MINER_NAME`
	MINER_ICON=`echo -e $MINER_ICON | head -c 4` # Just limit to 4 chars
fi

PERS=`$SANITIZE $PERS`
COIN_EXTRA_FLAGS=`$SANITIZE $COIN_EXTRA_FLAGS`
COLOR=`$SANITIZE $COLOR`
ICON=`echo -e $ICON | head -c 4` # Just limit to 4 chars


##############################################   START MINING   ####################################################


# Kill any existing instances
if [ "$OPT_K" = "false" ]
then
	./AXE -q -r
fi

###########  ü™ì AXE EXISTING  ###########
#									    #
# LOG COMMAND						    #
echo $COMMAND >> miner.out			    #
# EXECUTE COMMAND					    #
bash -c "$COMMAND >> miner.out 2>&1" &	#
#									    #
#########################################

# Empty miner.out (tail)
# echo > miner.out

# GET START COMMAND
case $MINER in
	"trex")
		# SET COMMAND
		COMMAND="$MINER_BIN $ALGO_FLAG $ALGO -o $POOL_SCHEME://$POOL_HOST_PORT -u $WALLET -p $POOL_PASSWORD -w $WORKER $CUDA_FLAG $CUDA_DEVICES_COMMA $EXTRA_FLAGS $COIN_EXTRA_FLAGS"
		;;

	"nbminer")
		# SET COMMAND
		COMMAND="$MINER_BIN $ALGO_FLAG $ALGO -o $POOL_SCHEME://$POOL_HOST_PORT -u $WALLET.$WORKER -p $POOL_PASSWORD $CUDA_FLAG $CUDA_DEVICES_COMMA $EXTRA_FLAGS $COIN_EXTRA_FLAGS"
		;;

	"gminer")
		# SET COMMAND
		COMMAND="$MINER_BIN $ALGO_FLAG $ALGO -s $POOL_HOST -n $POOL_PORT -u $WALLET.$WORKER -p $POOL_PASSWORD --worker $WORKER --pers $PERS $CUDA_FLAG $CUDA_DEVICES_SPACE $EXTRA_FLAGS $COIN_EXTRA_FLAGS"
		;;

	"ethminer")
		# SET COMMAND
		COMMAND="$MINER_BIN -P $POOL_SCHEME://$WALLET.$WORKER:$POOL_PASSWORD@$POOL_HOST:$POOL_PORT $CUDA_FLAG $CUDA_DEVICES_SPACE $OPENCL_FLAG $OPENCL_DEVICES_SPACE $EXTRA_FLAGS $COIN_EXTRA_FLAGS"
		;;

	"miniz")
		# SET COMMAND
		COMMAND="$MINER_BIN $ALGO_FLAG$ALGO --server $POOL_HOST --port $POOL_PORT --user $WALLET --pass $POOL_PASSWORD --worker $WORKER --pers=$PERS $CUDA_FLAG $CUDA_DEVICES_COMMA $EXTRA_FLAGS $COIN_EXTRA_FLAGS"
		;;

	*)
		# Not supported by miner, print error and exit
		echo "Can't start! Pick-Axe does not support ${MINER}." 1>&2
		exit 420
		;;
esac

############ START MINING üöÄ ############
#									    #
# LOG COMMAND						    #
echo $COMMAND >> miner.out			    #
# EXECUTE COMMAND					    #
bash -c "$COMMAND >> miner.out 2>&1 &"	#
#									    #
#########################################


##############################################   PRINT AND SAVE STUFF   ####################################################

# Print start success
echo "$COIN Mining ${green}${bold}STARTED${reset} using $MINER! ‚õèÔ∏è "

# Timestamp
DATETIMESTAMP=$(date +"%FT%H%M%S")

# Store status to var
STATUS="Worker,$WORKER \nMiner,$MINER_ICON $MINER_NAME \nCoin, ${!COLOR}$ICON${reset} $COIN \nWallet ID,$OPT_W \nWallet Address,$WALLET \nPool,$POOL_HOST_PORT\nTime Started,$DATETIMESTAMP"
# Save status to file
echo $STATUS > ./STATUS.csv

# Make receipt directory if needed
mkdir -p tickets

# Also save as receipt
echo $STATUS > "./tickets/ticket_$DATETIMESTAMP.csv"

# Print mining status
echo -e $STATUS | tty-table --header tty-configs/ticket.json

# Print tail message
echo "Run ${cyan}${bold}TAIL${reset} to tail mining process."

######################################################   FIN.   ############################################################